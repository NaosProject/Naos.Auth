// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Auth0PasswordAuthenticator.cs" company="Naos Project">
//    Copyright (c) Naos Project 2019. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in Naos.Auth.Recipes.Auth0 source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Auth.Recipes.Auth0
{
    using System;
    using System.Diagnostics.CodeAnalysis;
    using System.IO;
    using System.Net;
    using System.Text;
    using System.Web;
    using Naos.CodeAnalysis.Recipes;
    using OBeautifulCode.Assertion.Recipes;
    using OBeautifulCode.Serialization;
    using OBeautifulCode.Serialization.Json;
    using static System.FormattableString;

    /// <summary>
    /// Authentication helper for 'password' authentication on Auth0.
    /// This is for the 'Resource Owner Password Flow' which is NOT recommended but sometimes necessary for legacy applications.
    /// </summary>
#if !NaosAuthSolution
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Auth.Recipes.Auth0", "See package version number")]
    internal
#else
    public
#endif
    class Auth0PasswordAuthenticator
    {
        private static readonly IStringDeserialize Serializer = new ObcJsonSerializer();
        private readonly string issuer;
        private readonly string clientId;
        private readonly string clientSecret;
        private readonly string audience;
        private readonly TimeSpan requestTimeout;
        private readonly string connection;

        /// <summary>
        /// Initializes a new instance of the <see cref="Auth0PasswordAuthenticator"/> class.
        /// </summary>
        /// <param name="issuer">The issuer (Auth0 tenant URL).</param>
        /// <param name="clientId">The client identifier from the Auth0 application.</param>
        /// <param name="clientSecret">The client secret from the Auth0 application.</param>
        /// <param name="audience">The audience for the ticket.</param>
        /// <param name="requestTimeout">The request timeout for the authentication call.</param>
        /// <param name="connection">OPTIONAL connection name if there is not a default connection (database/social/etc.) for the tenant.</param>
        public Auth0PasswordAuthenticator(
            string issuer,
            string clientId,
            string clientSecret,
            string audience,
            TimeSpan requestTimeout,
            string connection = null)
        {
            issuer.MustForArg(nameof(issuer)).NotBeNullNorWhiteSpace();
            clientId.MustForArg(nameof(clientId)).NotBeNullNorWhiteSpace();
            clientSecret.MustForArg(nameof(clientSecret)).NotBeNullNorWhiteSpace();
            audience.MustForArg(nameof(audience)).NotBeNullNorWhiteSpace();

            this.issuer = issuer;
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.audience = audience;
            this.requestTimeout = requestTimeout;
            this.connection = connection;
        }

        /// <summary>
        /// Get an authentication ticket from Auth0 Authentication API using 'password' grant type.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <returns>The Authentication Ticket from Auth0.</returns>
        [SuppressMessage("Microsoft.Usage", "CA2202:Do not dispose objects multiple times", Justification = NaosSuppressBecause.CA2202_DoNotDisposeObjectsMultipleTimes_AnalyzerIsIncorrectlyFlaggingObjectAsBeingDisposedMultipleTimes)]
        public TicketContainer Authenticate(string username, string password)
        {
            var scope = "openid";
            var grantType = string.IsNullOrWhiteSpace(this.connection) ? "password" : "http://auth0.com/oauth/grant-type/password-realm";
            var contentType = "application/x-www-form-urlencoded";
            var acceptType = "application/json";
            var baseUri = new Uri(this.issuer, UriKind.Absolute);
            var relativeUri = new Uri("oauth/token", UriKind.Relative);
            var uri = new Uri(baseUri, relativeUri);

            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create(uri);
            request.ContentType = contentType;
            request.Accept = acceptType;
            request.Method = "POST";
            request.Timeout = (int)this.requestTimeout.TotalMilliseconds;

            var body = Invariant($"grant_type={HttpUtility.UrlEncode(grantType)}&username={HttpUtility.UrlEncode(username)}&password={HttpUtility.UrlEncode(password)}&audience={HttpUtility.UrlEncode(audience)}&scope={HttpUtility.UrlEncode(scope)}&client_id={HttpUtility.UrlEncode(clientId)}&client_secret={HttpUtility.UrlEncode(clientSecret)}&realm={HttpUtility.UrlEncode(connection)}");
            request.ContentLength = (long)body.Length;
            using (Stream requestStream = request.GetRequestStream())
            {
                using (StreamWriter streamWriter = new StreamWriter(requestStream, Encoding.ASCII))
                {
                    streamWriter.Write(body);
                    streamWriter.Close();
                }
            }

            string raw = null;
            using (var resp = request.GetResponse())
            {
                var responseStream = resp.GetResponseStream();
                if (responseStream != null)
                {
                    using (var reader = new StreamReader(responseStream))
                    {
                        raw = reader.ReadToEnd();
                    }
                }
            }

            if (string.IsNullOrWhiteSpace(raw))
            {
                return null;
            }
            else
            {
                var deserialized = Serializer.Deserialize<TicketContainerViewModel>(raw);
                var result = new TicketContainer
                             {
                                 AccessToken = deserialized.Access_Token,
                                 ExpiresIn = deserialized.Expires_in,
                                 Scope = deserialized.Scope,
                                 TokenType = deserialized.Token_Type,
                             };

                return result;
            }
        }
    }

    /// <summary>
    /// Container to extract response from API.
    /// </summary>
#if !NaosAuthSolution
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Auth.Recipes.Auth0", "See package version number")]
    internal
#else
    public
#endif
        class TicketContainerViewModel
    {
        /// <summary>
        /// Gets or sets the access token.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores", Justification = "Must match external contract.")]
        public string Access_Token { get; set; }

        /// <summary>
        /// Gets or sets the scope.
        /// </summary>
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the expires in.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores", Justification = "Must match external contract.")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "in", Justification = "Must match external contract.")]
        public string Expires_in { get; set; }

        /// <summary>
        /// Gets or sets the type of the token.
        /// </summary>
        [SuppressMessage("Microsoft.Naming", "CA1707:IdentifiersShouldNotContainUnderscores", Justification = "Must match external contract.")]
        public string Token_Type { get; set; }
    }

    /// <summary>
    /// Container to return response from API.
    /// </summary>
#if !NaosAuthSolution
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("Naos.Auth.Recipes.Auth0", "See package version number")]
    internal
#else
    public
#endif
        class TicketContainer
    {
        /// <summary>
        /// Gets or sets the access token.
        /// </summary>
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the scope.
        /// </summary>
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets the expires in.
        /// </summary>
        public string ExpiresIn { get; set; }

        /// <summary>
        /// Gets or sets the type of the token.
        /// </summary>
        public string TokenType { get; set; }
    }
}